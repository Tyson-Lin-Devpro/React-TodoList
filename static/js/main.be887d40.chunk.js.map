{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","onChange","e","target","type","className","onClick","preventDefault","trim","length","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be887d40.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {//從父元素傳過來的值\r\n\r\n  //更改inputText為輸入框的內容\r\n  const inputTextHandler = (e) => {\r\n    setInputText(e.target.value);\r\n  };\r\n  //送出表單\r\n  const submitTodoHandler = (e) => {\r\n    e.preventDefault();//不會重新載入頁面\r\n    if\r\n      (\r\n      inputText === \"\" ||\r\n      inputText === null ||\r\n      inputText.trim() === \"\" ||\r\n      inputText.length > 50\r\n    ) {\r\n      setInputText(\"\");\r\n      return false;\r\n    }\r\n    else {\r\n      setTodos([\r\n        ...todos, //先複製一份目前todos的內容，加入新的內容後再傳回\r\n        {\r\n          text: inputText,\r\n          completed: false,\r\n          id: Math.random() * 1000\r\n        }\r\n      ]);\r\n      setInputText(\"\");\r\n    }\r\n  }\r\n  //下拉式選單變更分類顯示\r\n  const statusHandler = (e) => {\r\n    setStatus(e.target.value)//這邊的e.target.value等於option裡的value\r\n  }\r\n  return (\r\n    <form>\r\n      <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n        <i className=\"fas fa-plus-square\"></i>\r\n      </button>\r\n      <div className=\"select\">\r\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n          <option value=\"all\">全部</option>\r\n          <option value=\"completed\">已完成</option>\r\n          <option value=\"uncompleted\">未完成</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n  )\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = ({ text, todo, todos, setTodos }) => {//從父元素傳過來的值\r\n\r\n  //過濾除了自身相同ID的項目後回傳setTodos\r\n  const deleteHandler = () => {\r\n    setTodos(todos.filter((el) => el.id !== todo.id));\r\n  }\r\n//已完成切換按鈕\r\n  const completeHandler = () => {\r\n    setTodos(todos.map((item) => {//這裡的item是todos裡的東西，自行命名\r\n      if (item.id === todo.id) {\r\n        return {\r\n          ...item,//複製一份就項目\r\n          completed: !item.completed//將複製的內容修改為!相反，completed值只有true或false\r\n        }\r\n      }\r\n      return item;//回傳修改完的內容\r\n    }))\r\n  }\r\n  return (\r\n    <div className=\"todo\">\r\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n      <button onClick={completeHandler} className=\"complete-btn\">\r\n        <i className=\"fas fa-check\"></i>\r\n      </button>\r\n      <button onClick={deleteHandler} className=\"trash-btn\">\r\n        <i className=\"fas fa-trash\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\r\nimport Todo from './Todo';\r\n\r\nconst TodoList = ({ todos,setTodos,filteredTodos }) => {//從父元素傳過來的值\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <ul className=\"todo-list\">\r\n        {filteredTodos.map((todo)=>(\r\n          <Todo \r\n          setTodos={setTodos} \r\n          todos={todos} \r\n          todo={todo}\r\n          key={todo.id} \r\n          text={todo.text} \r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default TodoList;","import React, { useState, useEffect } from 'react';\nimport \"./style.css\";\nimport Form from './components/Form'\nimport TodoList from './components/TodoList.js'\n\n\nfunction App() {\n  //useState涵式，使用hook,宣告[a,b]常數，a為變量名稱，b為重設涵式，後useState(a的預設值)，更改a的值使用b(XXX)修改\n  const [inputText, setInputText] = useState('');\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n  \n  //useEffect涵式，定義那些hook更新後要執行一次的函數\n  useEffect(() => {\n    getLocalTodos();//頁面render後執行取的localstorage的資料並載入的涵式\n  },[])//空的表示只會在第一次render時執行而已\n\n  useEffect(() => {\n    filterHandler();//todos和status[每次]render執行項目分類一次\n    saveLocalTodos();//todos和status[每次]render都會儲存資料在本地端\n  }, [todos, status]);//todos和status[每次]render時執行一次\n  \n  \n  //切換選項後顯示的內容\n  const filterHandler = () => {\n    switch (status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n  //將物件轉譯成JSON檔並以\"todos\"作為key值儲存在本地記憶體\n  const saveLocalTodos = () => {\n      localStorage.setItem('todos',JSON.stringify(todos));\n  }\n  //取得本地記憶體key值為\"todos\"的JSON檔轉譯為物件並載入並片歷\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos',JSON.stringify([]));\n    }else{\n      let todoLocal = JSON.parse(localStorage.getItem('todos'))\n      setTodos(todoLocal);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>待辦事項清單</h1>\n      </header>\n      <Form\n        inputText={inputText}\n        todos={todos}\n        setTodos={setTodos}\n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList\n        setTodos={setTodos}\n        todos={todos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}